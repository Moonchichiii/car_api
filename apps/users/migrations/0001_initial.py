# Generated by Django 5.2 on 2025-05-02 16:21

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import django_cryptography.fields
import phonenumber_field.modelfields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="BlacklistedToken",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "token",
                    models.CharField(
                        max_length=255,
                        unique=True,
                        validators=[
                            django.core.validators.MinLengthValidator(
                                10, "Token value is too short"
                            )
                        ],
                        verbose_name="token",
                    ),
                ),
                ("blacklisted_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField()),
            ],
            options={
                "verbose_name": "blacklisted token",
                "verbose_name_plural": "blacklisted tokens",
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
                                "Enter a valid email address",
                            )
                        ],
                        verbose_name="email address",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True,
                        max_length=30,
                        validators=[
                            django.core.validators.MinLengthValidator(
                                2, "First name must be at least 2 characters"
                            )
                        ],
                        verbose_name="first name",
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True,
                        max_length=30,
                        validators=[
                            django.core.validators.MinLengthValidator(
                                2, "Last name must be at least 2 characters"
                            )
                        ],
                        verbose_name="last name",
                    ),
                ),
                (
                    "phone_number",
                    django_cryptography.fields.encrypt(
                        phonenumber_field.modelfields.PhoneNumberField(
                            blank=True,
                            help_text="International format: +123456789",
                            max_length=128,
                            region=None,
                            verbose_name="phone number",
                        )
                    ),
                ),
                ("phone_verified", models.BooleanField(default=False)),
                (
                    "address_line1",
                    django_cryptography.fields.encrypt(
                        models.CharField(
                            blank=True,
                            help_text="Street address, P.O. box, company name, c/o",
                            max_length=100,
                            verbose_name="address line 1",
                        )
                    ),
                ),
                (
                    "address_line2",
                    django_cryptography.fields.encrypt(
                        models.CharField(
                            blank=True,
                            help_text="Apartment, suite, unit, building, floor, etc.",
                            max_length=100,
                            verbose_name="address line 2",
                        )
                    ),
                ),
                (
                    "city",
                    django_cryptography.fields.encrypt(
                        models.CharField(blank=True, max_length=50, verbose_name="city")
                    ),
                ),
                (
                    "postal_code",
                    django_cryptography.fields.encrypt(
                        models.CharField(
                            blank=True, max_length=20, verbose_name="postal code"
                        )
                    ),
                ),
                (
                    "country",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-z\\s\\'-]+$",
                                "Country name can only contain letters, spaces, apostrophes, and hyphens",
                            )
                        ],
                        verbose_name="country",
                    ),
                ),
                (
                    "date_of_birth",
                    django_cryptography.fields.encrypt(
                        models.DateField(
                            blank=True,
                            help_text="YYYY-MM-DD",
                            null=True,
                            verbose_name="date of birth",
                        )
                    ),
                ),
                (
                    "drivers_license_number",
                    django_cryptography.fields.encrypt(
                        models.CharField(
                            blank=True,
                            max_length=50,
                            verbose_name="drivers license number",
                        )
                    ),
                ),
                (
                    "drivers_license_expiry",
                    models.DateField(
                        blank=True, null=True, verbose_name="drivers license expiry"
                    ),
                ),
                ("identity_verified", models.BooleanField(default=False)),
                (
                    "id_document_type",
                    models.CharField(
                        choices=[("drivers_license", "Driver's License")],
                        default="drivers_license",
                        editable=False,
                        max_length=20,
                        verbose_name="ID document type",
                    ),
                ),
                (
                    "id_verification_timestamp",
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                ("email_verified", models.BooleanField(default=False)),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "last_modified",
                    models.DateTimeField(auto_now=True, verbose_name="last modified"),
                ),
                (
                    "last_login_ip",
                    models.GenericIPAddressField(
                        blank=True, null=True, verbose_name="last login IP"
                    ),
                ),
                ("accepted_terms", models.BooleanField(default=False)),
                ("accepted_privacy_policy", models.BooleanField(default=False)),
                ("terms_acceptance_date", models.DateTimeField(blank=True, null=True)),
                (
                    "account_deletion_requested",
                    models.DateTimeField(blank=True, null=True),
                ),
                ("anonymized", models.BooleanField(default=False)),
                ("marketing_emails", models.BooleanField(default=False)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
            },
        ),
        migrations.CreateModel(
            name="EmailChangeHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("old_email", models.EmailField(max_length=254)),
                ("new_email", models.EmailField(max_length=254)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="email_changes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="FailedLoginAttempt",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="failed_logins",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="PasswordHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=100)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="password_history",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="UserConsent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "consent_type",
                    models.CharField(
                        choices=[
                            ("terms", "Terms and Conditions"),
                            ("privacy", "Privacy Policy"),
                            ("marketing", "Marketing Emails"),
                        ],
                        max_length=30,
                        verbose_name="consent type",
                    ),
                ),
                ("given", models.BooleanField(verbose_name="consent given")),
                (
                    "timestamp",
                    models.DateTimeField(auto_now_add=True, verbose_name="timestamp"),
                ),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="consents",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "user consent",
                "verbose_name_plural": "user consents",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="VerificationToken",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("token", models.CharField(max_length=64)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("email", "Email"),
                            ("phone", "Phone"),
                            ("reset", "Password Reset"),
                            ("delete", "Account Deletion"),
                        ],
                        max_length=10,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField()),
                ("used", models.BooleanField(default=False)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "verification token",
                "verbose_name_plural": "verification tokens",
            },
        ),
    ]
